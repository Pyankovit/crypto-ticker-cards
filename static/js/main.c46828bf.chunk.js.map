{"version":3,"sources":["Components/Tickers.js","App.js","serviceWorker.js","index.js"],"names":["Tickers","state","wanted","allCurrency","id","name","symbol","price_usd","handleChange","setState","localStorage","setItem","JSON","stringify","axios","get","then","response","data","console","log","catch","err","undefined","getItem","localWanted","parse","this","alert","fetchCryptoData","checklocalStorage","className","hideSelectedOptions","isMulti","options","onChange","getOptionLabel","option","getOptionValue","length","map","item","key","toFixed","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWAKqBA,E,2MACjBC,MAAM,CACFC,OAAO,GACPC,YAAY,CACR,CACIC,GAAI,UACJC,KAAM,UACNC,OAAQ,MACRC,UAAW,O,EAgCvBC,aAAe,SAAAN,GACX,EAAKO,SAAS,CAAEP,WAChBQ,aAAaC,QAAQ,SAAUC,KAAKC,UAAU,CAAEX,a,iFA7BlC,IAAD,OACbY,IAAMC,IAAI,4CACTC,MAAK,SAAAC,GACF,EAAKR,SAAS,CAACN,YAAac,EAASC,OACpCC,QAAQC,IAAIH,EAASC,SAEzBG,OAAM,SAAAC,GAAG,OAAEH,QAAQC,IAAIE,Q,0CAIxB,QAAuCC,IAAnCb,aAAac,QAAQ,UAAyB,CAC9C,IAAMC,EAAYb,KAAKc,MAAMhB,aAAac,QAAQ,WAClDG,KAAKlB,SAAS,CAAEP,OAAQuB,EAAYvB,aAClC,CAAC,IACEA,EAAWyB,KAAK1B,MAAhBC,OACLQ,aAAaC,QAAQ,SAAUC,KAAKC,UAAU,CAAEX,YACT,OAAnCQ,aAAac,QAAQ,WACzBI,MAAM,wK,0CAMVD,KAAKE,kBACLF,KAAKG,sB,+BAQC,IACD5B,EAAWyB,KAAK1B,MAAhBC,OAEL,OADY,MAARA,IAAcA,EAAO,IAErB,yBAAK6B,UAAU,sBACC,2PACA,kBAAC,IAAD,CACIC,qBAAqB,EACrBC,SAAO,EACPC,QAASP,KAAK1B,MAAME,YACpBgC,SAAUR,KAAKnB,aACf4B,eAAgB,SAAAC,GAAM,gBAAMA,EAAOhC,KAAb,aAAsBgC,EAAO/B,OAA7B,MACtBgC,eAAgB,qBAAGhC,UAEvB,sNACA,yBAAKyB,UAAU,oBACV7B,EAAOqC,OAAS,GAAKrC,EAAOsC,KAAI,SAAAC,GAAI,OAAI,yBAAKvB,KAAMuB,EAAMC,IAAKD,EAAKrC,IAChE,wBAAI2B,UAAW,kBAAkBU,EAAKrC,IAClC,wBAAI2B,UAAU,uBAAd,mDAA6C,IAAKU,EAAKpC,MACvD,wBAAI0B,UAAU,yBAAd,uCAA6C,IAAKU,EAAKnC,QACvD,wBAAIyB,UAAU,wBAAd,iIAAgE,IAAhE,MAAwEU,EAAKlC,WAAWoC,QAAQ,e,GAjEnGC,a,MCUtBC,MAXf,WACE,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,cACb,iFAEF,kBAAC,EAAD,QCEce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.c46828bf.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport './Tickers.css';\r\nimport axios from 'axios';\r\nimport Select, { components } from \"react-select\";\r\n\r\nexport default class Tickers extends Component {\r\n    state={\r\n        wanted:[], \r\n        allCurrency:[\r\n            { \r\n                id: \"bitcoin\",\r\n                name: \"Bitcoin\",\r\n                symbol: \"BTC\",\r\n                price_usd: \"1\",\r\n            }\r\n        ]\r\n    }\r\n    \r\n    fetchCryptoData(){\r\n        axios.get(\"https://api.coinmarketcap.com/v1/ticker/\")\r\n        .then(response=>{ \r\n            this.setState({allCurrency: response.data});\r\n             console.log(response.data);\r\n        })\r\n        .catch(err=>console.log(err));\r\n    }\r\n\r\n    checklocalStorage(){\r\n        if (localStorage.getItem(\"wanted\") !== undefined) {\r\n            const localWanted=JSON.parse(localStorage.getItem('wanted'));\r\n            this.setState({ wanted: localWanted.wanted});\r\n        }else {\r\n            let{ wanted } = this.state;\r\n            localStorage.setItem('wanted', JSON.stringify({ wanted })); \r\n            if (localStorage.getItem(\"wanted\") === null) {\r\n            alert('Ваш браузер не поддерживает localStorage!');      \r\n          } \r\n        }\r\n        } \r\n    \r\n    componentDidMount() {\r\n        this.fetchCryptoData();\r\n        this.checklocalStorage();\r\n    }\r\n\r\n    handleChange = wanted => {\r\n        this.setState({ wanted });\r\n        localStorage.setItem('wanted', JSON.stringify({ wanted }));\r\n      };\r\n\r\n    render() {\r\n        let{ wanted } = this.state;\r\n        if (wanted==null){wanted=[]}\r\n        return (\r\n            <div className=\"tickers-containers\">\r\n                            <h1>Список поиска отслеживаемых криптовалют</h1>\r\n                            <Select\r\n                                hideSelectedOptions={false}\r\n                                isMulti\r\n                                options={this.state.allCurrency}\r\n                                onChange={this.handleChange}\r\n                                getOptionLabel={option =>`${option.name} (${option.symbol})`}\r\n                                getOptionValue={({ symbol }) => symbol}\r\n                                />\r\n                            <h1>Список отслеживаемых криптовалют</h1>\r\n                            <div className=\"selected-options\">\r\n                                {wanted.length > 0 && wanted.map(item => <div data={item} key={item.id}>\r\n                                    <li className={\"cryptocurrency \"+item.id}>\r\n                                        <h1 className=\"cryptocurrency-name\">Название{\" \"}{item.name}</h1>\r\n                                        <h2 className=\"cryptocurrency-symbol\">Символ{\" \"}{item.symbol}</h2>\r\n                                        <h2 className=\"cryptocurrency-price\">Текущая цена (доллар США) {\" \"}${(+item.price_usd).toFixed(2)}</h2>\r\n                                    </li>\r\n                                </div>)}\r\n                            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Tickers from './Components/Tickers';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <h2>Тестовое</h2>\r\n      </div>\r\n      <Tickers/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}